generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  title      String
  company    String
  industry   String
  goalDays   Int
  email      String
  phone      String
  links      String[]
  interests  String[]
  activities Activity[]
  isArchived Boolean    @default(false)
  User       User?      @relation(fields: [userId], references: [id])
  userId     String
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  date        String

  type ActivityType

  Contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String
}

enum ActivityType {
  USER
  SYSTEM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Contacts      Contact[]
  goals         Goals?
}

model Goals {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  networkingComfortLevel Int
  goalConnections        Int
  goalMessages           Int
  connections            Int @default(0)
  messages               Int @default(0)
  streak                 Int @default(0)

  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
